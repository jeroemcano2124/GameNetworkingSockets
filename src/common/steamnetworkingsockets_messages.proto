//====== Copyright Valve Corporation, All rights reserved. ====================
//
// Wire format messages for Steam datagram transport
//
//=============================================================================
syntax = "proto2";

// Note about encoding:
//	http://code.google.com/apis/protocolbuffers/docs/encoding.html
//
// TL;DR: Use sint32/sint64 for values that may be negative.
//
// There is an important difference between the signed int types (sint32 and sint64)
// and the "standard" int types (int32 and int64) when it comes to encoding negative
// numbers.  If you use int32 or int64 as the type for a negative number, the
// resulting varint is always ten bytes long – it is, effectively, treated like a
// very large unsigned integer.  If you use one of the signed types, the resulting
// varint uses ZigZag encoding, which is much more efficient.


// Commenting this out allows it to be compiled for SPEED or LITE_RUNTIME.
// option optimize_for = SPEED;

// We don't use the service generation functionality
option cc_generic_services = false;

// 
// STYLE NOTES:
//
// Use CamelCase CMsgMyMessageName style names for messages.
// 
// Use lowercase _ delimited names like my_steam_id for field names, this is non-standard for Steam,
// but plays nice with the Google formatted code generation.  
// 
// Try not to use required fields ever. Only do so if you are really really sure you'll never want them removed. 
// Optional should be preffered as it will make versioning easier and cleaner in the future if someone refactors
// your message and wants to remove or rename fields.
//
// Use fixed64 for JobId_t, GID_t, or SteamID.  This is appropriate for any field that is normally
// going to be larger than 2^56.  Otherwise use int64 for 64 bit values that are frequently smaller
// than 2^56 as it will safe space on the wire in those cases.
//
// Similar to fixed64, use fixed32 for RTime32 or other 32 bit values that are frequently larger than
// 2^28.  It will safe space in those cases, otherwise use int32 which will safe space for smaller values.
// An exception to this rule for RTime32 is if the value will frequently be zero rather than set to an actual 
// time.
//

/// Control message ID.
enum ESteamDatagramMsgID
{
	k_ESteamDatagramMsg_Invalid = 0;						// Reserved
	k_ESteamDatagramMsg_RouterPingRequest = 1;				// Client -> Router
	k_ESteamDatagramMsg_RouterPingReply = 2;				// Router -> Client
	k_ESteamDatagramMsg_GameserverPingRequest = 3;			// Router -> Server
	k_ESteamDatagramMsg_GameserverPingReply = 4;			// Server -> Router -> Client
	k_ESteamDatagramMsg_GameserverSessionRequest = 5;		// Client -> Router
	k_ESteamDatagramMsg_GameserverSessionEstablished = 6;	// Router -> Client
	k_ESteamDatagramMsg_NoSession = 7;						// Router -> Server, Router -> Client
	k_ESteamDatagramMsg_Diagnostic = 8;						// Diagnostic / status message Router -> Client
	k_ESteamDatagramMsg_DataClientToRouter = 9;				// Client -> Router
	k_ESteamDatagramMsg_DataRouterToServer = 10;			// Router -> Server
	k_ESteamDatagramMsg_DataServerToRouter = 11;			// Server -> Router
	k_ESteamDatagramMsg_DataRouterToClient = 12;			// Server -> Router
	k_ESteamDatagramMsg_Stats = 13;							// Any -> Any
	k_ESteamDatagramMsg_ClientPingSampleRequest = 14;		// Router->client
	k_ESteamDatagramMsg_ClientPingSampleReply = 15;			// Client->router
	k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary = 16;	// Client->router
	k_ESteamDatagramMsg_RelayHealth = 17;					// router->router
	k_ESteamDatagramMsg_ConnectRequest = 18;				// Client->router->server
	k_ESteamDatagramMsg_ConnectOK = 19;						// Server->router->client.
	k_ESteamDatagramMsg_ConnectionClosed = 20;				// Server<->router<->client.  A reply is requested to this packet
	k_ESteamDatagramMsg_NoConnection = 21;					// Server<->router<->client.  A reply should never be sent to this packet
	k_ESteamDatagramMsg_RelayToRelayPingRequest = 22;		// Relay<->Relay.  Measure latency between relays
	k_ESteamDatagramMsg_RelayToRelayPingReply = 23;			// Relay<->Relay.  ... reply
	k_ESteamDatagramMsg_P2PSessionRequest = 24;				// Client->Relay Request a P2P session
	k_ESteamDatagramMsg_P2PSessionEstablished = 25;			// Relay->Client Response
	k_ESteamDatagramMsg_P2PStatsClient = 26;				// Client<->Relay
	k_ESteamDatagramMsg_P2PStatsRelay = 27;					// Relay<->Relay
	k_ESteamDatagramMsg_P2PBadRoute = 28;					// Relat->Relay, or Relay->Client
};

// k_ESteamDatagramMsg_RouterPingReply
//
// NOTE: The SDR code pre-serializes these and generally mucks with them at a low level.
//       Don't change this without looking at the server code carefully.
//
message CMsgSteamDatagramRouterPingReply
{
	optional fixed32 client_timestamp = 1;						// The timestamp you gave me
	repeated fixed32 latency_datacenter_ids = 2 [packed=true];	// List of service ID's I can route to.  (If route is not allowed, it won't be listed here.)
	repeated uint32 latency_ping_ms = 3 [packed=true];			// Latency from this router to the corresponding service ID.  (Parallel with latency_datacenter_ids)
	optional fixed32 your_public_ip = 4;						// The IP address I received this packet from.  Used to secure / check proof-of-work and auth ticket.
	optional fixed32 server_time = 5;							// Current wall clock time according to me.  Used for proof-of-work and auth ticket.
	optional fixed64 challenge = 6;								// Challenge value.  If you want a session, you'll need to reply with this guy, and the wall clock time I just gave you
	optional uint32 seconds_until_shutdown = 7;					// We're replying to your query so you will have the requested data, and so you don't have to time us out, but we're going down soon, so you shouldn't ask for a session.
	optional fixed32 client_cookie = 8;							// The challenge that the client sent.

	// Global scoring penalty value for the entire relay cluster, no
	// matter what data center we want to talk to.
	optional uint32 scoring_penalty_relay_cluster = 9;

	// Assume that the route to each data center will go over our
	// backbone and there is no unusual congestion, except for data
	// centers listed here
	message RouteException
	{
		optional fixed32 data_center_id = 1;
		optional uint32 flags = 2;
		optional uint32 penalty = 3;
	};
	repeated RouteException route_exceptions = 10;
};

// Session keys used in key exchange
message CMsgSteamDatagramSessionCryptInfo
{

	// Key used for Diffie–Hellman key exchange.  Typically this should be an
	// ephemeral key used only for this connection.
	enum EKeyType
	{
		INVALID = 0;
		CURVE25519 = 1;
	};
	optional EKeyType key_type = 1;
	optional bytes key_data = 2;
	optional fixed64 nonce = 3;
	optional bool is_snp = 4; // Set when this connection is using SNP, must match in order for communication to proceed
};

// Session keys used in key exchange
message CMsgSteamDatagramSessionCryptInfoSigned
{
	/// Serialized CMsgSteamDatagramSessionCryptInfo
	optional bytes info = 1;

	/// Signature of encryption_key_data generated using the public key
	/// from the CMsgSteamDatagramCertificate.
	optional bytes signature = 2;
}

// k_ESteamDatagramMsg_Diagnostic
message	CMsgSteamDatagramDiagnostic
{
	optional uint32	severity = 1;							// Standard Steam emit levels: 1 = error, 2 = warning, 3 = info, 4 = verbose
	optional string text = 2;								// Message text
};

/// Wire version of SteamDatagramLinkInstantaneousStats.
/// We use integers to send this stuff so that most fields take
/// 1 or 2 bytes, instead of always taking 4.
message CMsgSteamDatagramLinkInstantaneousStats
{
	optional uint32 out_packets_per_sec_x10 = 1;
	optional uint32 out_bytes_per_sec = 2;
	optional uint32 in_packets_per_sec_x10 = 3;
	optional uint32 in_bytes_per_sec = 4;
	optional uint32 ping_ms = 5;
	optional uint32 packets_dropped_pct = 6; // 0 ... 100
	optional uint32 packets_weird_sequence_pct = 7; // 0 ... 100
	optional uint32 peak_jitter_usec = 8;
};

/// Wire version of SteamDatagramLinkLifetimeStats
message CMsgSteamDatagramLinkLifetimeStats
{
	//optional uint32 rms_ping_ms = 1;
	//optional uint32 connection_age = 2;
	optional uint64 packets_sent = 3;
	optional uint64 kb_sent = 4;
	optional uint64 packets_recv = 5;
	optional uint64 kb_recv = 6;
	optional uint64 packets_recv_sequenced = 7;
	optional uint64 packets_recv_dropped = 8;
	optional uint64 packets_recv_out_of_order = 9;
	optional uint64 packets_recv_duplicate = 10;
	optional uint64 packets_recv_lurch = 11;

	/// Histogram of connection quality.  Here we count up the number
	/// of connection quality measurement intervals (about 5 seconds)
	/// that fell into each quality measurement.  Quality measurment
	/// is the percentage of packets that were delivered, in order,
	/// without being duplicated
	optional uint32 quality_histogram_100 = 21; // This means everything was perfect.  Even if we delivered over 100 packets in the interval and we should round up to 100, we will use 99% instead.
	optional uint32 quality_histogram_99 = 22; // 99%+
	optional uint32 quality_histogram_97 = 23;
	optional uint32 quality_histogram_95 = 24;
	optional uint32 quality_histogram_90 = 25;
	optional uint32 quality_histogram_75 = 26;
	optional uint32 quality_histogram_50 = 27;
	optional uint32 quality_histogram_1 = 28;
	optional uint32 quality_histogram_dead = 29; // we received nothing during the interval; it looks like the connection dropped
	optional uint32 quality_ntile_2nd = 30; // 2% of measurement intervals had quality <= N%
	optional uint32 quality_ntile_5th = 31; // 5% of measurement intervals had quality <= N%
	optional uint32 quality_ntile_25th = 32; // 25% of measurement intervals had quality <= N%
	optional uint32 quality_ntile_50th = 33; // 50% of measurement intervals had quality <= N%

	/// Distribution of ping times.  Basically we make sure we take a ping measurement
	/// at a minimum interval, and then we build a distribution of all the samples.
	/// Note that we don't take great care to ensure that the samples are taken
	/// perfectly evenly, but they should be reasonably even.
	optional uint32 ping_histogram_25 = 41; // 0..25
	optional uint32 ping_histogram_50 = 42; // 26..50
	optional uint32 ping_histogram_75 = 43; // 51..75
	optional uint32 ping_histogram_100 = 44; // etc
	optional uint32 ping_histogram_125 = 45;
	optional uint32 ping_histogram_150 = 46;
	optional uint32 ping_histogram_200 = 47;
	optional uint32 ping_histogram_300 = 48;
	optional uint32 ping_histogram_max = 49; // >300
	optional uint32 ping_ntile_5th = 50; // 5% of ping samples were <= Nms
	optional uint32 ping_ntile_50th = 51; // 50% of ping samples were <= Nms
	optional uint32 ping_ntile_75th = 52; // 70% of ping samples were <= Nms
	optional uint32 ping_ntile_95th = 53; // 95% of ping samples were <= Nms
	optional uint32 ping_ntile_98th = 54; // 98% of ping samples were <= Nms

	/// Jitter distribution.
	optional uint32 jitter_histogram_negligible = 61; // <1ms
	optional uint32 jitter_histogram_1 = 62; // 1..2
	optional uint32 jitter_histogram_2 = 63; // 2..5
	optional uint32 jitter_histogram_5 = 64; // 5..10
	optional uint32 jitter_histogram_10 = 65; // 10..20
	optional uint32 jitter_histogram_20 = 66; // 20+

	/// Transmit speed
	optional uint32 txspeed_max            = 67;

	optional uint32 txspeed_histogram_16   = 68; // speed at kb/s
	optional uint32 txspeed_histogram_32   = 69; 
	optional uint32 txspeed_histogram_64   = 70;
	optional uint32 txspeed_histogram_128  = 71;
	optional uint32 txspeed_histogram_256  = 72;
	optional uint32 txspeed_histogram_512  = 73;
	optional uint32 txspeed_histogram_1024 = 74;
	optional uint32 txspeed_histogram_max  = 75;

	// distribution.  some might be -1, see above for why.
	optional uint32 txspeed_ntile_5th  = 76; // 5% of transmit samples were <= n kb/s
	optional uint32 txspeed_ntile_50th = 77; // 50% of transmit samples were <= n kb/s 
	optional uint32 txspeed_ntile_75th = 78; // 70% of transmit samples were <= n kb/s 
	optional uint32 txspeed_ntile_95th = 79; // 95% of transmit samples were <= n kb/s 
	optional uint32 txspeed_ntile_98th = 80; // 98% of transmit samples were <= n kb/s 

	//
	// Receive speed
	//
	optional uint32 rxspeed_max = 81; // max speed we hit that formed the histogram

	optional uint32 rxspeed_histogram_16 = 82; // speed at kb/s
	optional uint32 rxspeed_histogram_32 = 83; 
	optional uint32 rxspeed_histogram_64 = 84;
	optional uint32 rxspeed_histogram_128 = 85;
	optional uint32 rxspeed_histogram_256 = 86;
	optional uint32 rxspeed_histogram_512 = 87;
	optional uint32 rxspeed_histogram_1024 = 88;
	optional uint32 rxspeed_histogram_max = 89;

	// distribution.  some might be -1, see above for why.
	optional uint32 rxspeed_ntile_5th = 90; // 5% of transmit samples were <= n kb/s
	optional uint32 rxspeed_ntile_50th = 91; // 50% of transmit samples were <= n kb/s 
	optional uint32 rxspeed_ntile_75th = 92; // 70% of transmit samples were <= n kb/s 
	optional uint32 rxspeed_ntile_95th = 93; // 95% of transmit samples were <= n kb/s 
	optional uint32 rxspeed_ntile_98th = 94; // 98% of transmit samples were <= n kb/s 
};

/// Message containing connection quality related messages
/// (possibly inline with a data packet)
message CMsgSteamDatagramConnectionQuality
{
	optional CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
	optional CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
	//optional uint32 seqnum_ack_lifetime = 3;
};

// Do not remove this comment due to a bug on the Mac OS X protobuf compiler

